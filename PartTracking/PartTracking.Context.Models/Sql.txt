USE [PartMgt]
GO
/****** Object:  StoredProcedure [dbo].[AddCustomerOrderWorkOrder]    Script Date: 2021-08-17 5:29:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[AddCustomerOrderWorkOrder]  	
AS
BEGIN
       SET NOCOUNT ON;

       BEGIN TRAN
              BEGIN TRY                     
					DECLARE @cnt INT = 0; 
					declare @customerOrderIdVal int = 0;
					declare @partMasterIdVal int =0;

					WHILE @cnt < 10
					BEGIN	
					
					   SET @cnt = @cnt + 1;
					   print @cnt;
					   insert into CustomerOrder
					   (CustomerId, ProductName, OrderQuantity, ProductDrawing)
					   values
					   (@cnt, (SELECT CONCAT('Product - ', @cnt)), @cnt*100, null)
					   
					   set @customerOrderIdVal = SCOPE_IDENTITY()
					   print @customerOrderIdVal;
					
					   set @partMasterIdVal = (SELECT foo.PartMasterId FROM (
								  SELECT
									ROW_NUMBER() OVER (ORDER BY PartMasterId ASC) AS rownumber,
									PartMasterId
								  FROM PartMaster
								) AS foo
								WHERE rownumber =@cnt)
						print @partMasterIdVal

					   insert into WorkOrder
					   (WorkOrderId,CustomerOrderId,PartMasterId, PartQuantityRequired, BalanceAfterPull)
					   values
					   (@cnt,@customerOrderIdVal,@partMasterIdVal,@cnt*100,@cnt*100) 

					   
					END;
					COMMIT TRANSACTION
					PRINT 'Done...';				
			 END TRY
		     BEGIN CATCH
				  -- if error, roll back any chanegs done by any of the sql statements
				  ROLLBACK TRANSACTION
				  THROW;
		     END CATCH
END


-----------------------------------------------------


USE [PartMgt]
GO
/****** Object:  StoredProcedure [dbo].[AddPartMasterWithPartDetail]    Script Date: 2021-08-17 5:29:57 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[AddPartMasterWithPartDetail]
      @PartCode varchar(100),
      @PartName varchar(100),
	  @PartDesc varchar(1000),
      @PartDrgFile varchar(100),
	  @id int output
AS
BEGIN
       -- SET NOCOUNT ON added to prevent extra result sets from
       -- interfering with SELECT statements.
       SET NOCOUNT ON;

       BEGIN TRAN
              BEGIN TRY
                     -- Insert into PersonalDetails table first
                     -- Add PartMaster
						  INSERT INTO  PartMaster (PartCode, PartName)
						  VALUES (@PartCode, @PartName)
						  SET @id=SCOPE_IDENTITY()

					 -- check for exception
					 -- set @id = @id+1

					 -- Add PartDetail
						 insert into PartDetail values (@id, @PartDesc, @PartDrgFile)
                     
				-- if not error, commit the transcation
				COMMIT TRANSACTION
				return @id
			 END TRY
		     BEGIN CATCH
				  -- if error, roll back any chanegs done by any of the sql statements
				  ROLLBACK TRANSACTION
				  set @id = -1
		     END CATCH
END


---------------------------------------------------

USE [PartMgt]
GO
/****** Object:  StoredProcedure [dbo].[EditOrderMaster]    Script Date: 2021-08-17 5:30:21 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[EditOrderMaster]   
	  @PartMasterId int,
	  @OrderQuantity int,
	  @OrderMasterId int,
	  @retCode int output
AS
BEGIN
       SET NOCOUNT ON;

       BEGIN TRAN
              BEGIN TRY
                     -- edit OrderMaster
						  update OrderMaster 
						  set PartMasterId = @PartMasterId, OrderQuantity = @OrderQuantity
						  where OrderMasterId=@OrderMasterId	
                     
				-- if not error, commit the transcation
				COMMIT TRANSACTION
				SET @retCode = 0
				return @retCode
			 END TRY
		     BEGIN CATCH
				  -- if error, roll back any chanegs done by any of the sql statements
				  ROLLBACK TRANSACTION
				  THROW;
				  SET @retCode = -1
				  return @retCode
		     END CATCH
END

-------------------------------------------

USE [PartMgt]
GO
/****** Object:  StoredProcedure [dbo].[EditPartMasterWithPartDetail]    Script Date: 2021-08-17 5:30:43 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[EditPartMasterWithPartDetail]
      @PartCode varchar(100),
      @PartName varchar(100),
	  @PartDesc varchar(1000),
      @PartDrgFile varchar(100),
	  @PartMasterId int,
	  @PartDetailId int,
	  @retCode int output
AS
BEGIN
       -- SET NOCOUNT ON added to prevent extra result sets from
       -- interfering with SELECT statements.
       SET NOCOUNT ON;

       BEGIN TRAN
              BEGIN TRY
                     -- edit PartMaster
						  update PartMaster 
						  set PartCode = @PartCode, PartName = @PartName
						  where PartMasterId=@PartMasterId				
								
						  

					 -- edit PartDetail
						 update PartDetail
						 set PartDesc = @PartDesc, PartDrgFile = @PartDrgFile
						 where PartDetailId=@PartDetailId
					
                     
				-- if not error, commit the transcation
				COMMIT TRANSACTION
				SET @retCode = 0
				return @retCode
			 END TRY
		     BEGIN CATCH
				  -- if error, roll back any chanegs done by any of the sql statements
				  ROLLBACK TRANSACTION
				  THROW;
				  SET @retCode = -1
				  return @retCode
		     END CATCH
END


---------------------------------------------


USE [PartMgt]
GO
/****** Object:  StoredProcedure [dbo].[ReceivePartMaster]    Script Date: 2021-08-17 5:31:03 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


ALTER PROCEDURE [dbo].[ReceivePartMaster]  
	  @OrderMasterId int, 
	  @PartMasterId int,
	  @ReceiveQuantity int,
	  @ReceiveDate date,
	  @RefCode nvarchar(6),
	  @retCode int output
AS
BEGIN
       SET NOCOUNT ON;

       BEGIN TRAN
              BEGIN TRY
                     -- TR1 add @ReceivePart
						  insert into ReceivePart
						  values
						  (@OrderMasterId, @PartMasterId, @ReceiveQuantity, @ReceiveDate)
						  -- (36, 13,150,GETDATE())


					 -- TR2 change StatusCode to 1 -- Received @OrderMaster


						DECLARE @cnt INT = 0; 
						set @cnt= (select count(*) from ReceivePart where OrderMasterId=@OrderMasterId)
						-- set @cnt= (select count(*) from ReceivePart where OrderMasterId=36)
						print @cnt
						if(@cnt>1)
							begin
								-- Received / Half_Received
								declare @totalReceivedQty int = 0;
								declare @totalOrderQty int = 0;
								set @totalReceivedQty = (select sum(ReceiveQuantity) from ReceivePart where OrderMasterId=@OrderMasterId)    -- 36) 
								set @totalOrderQty = (select OrderQuantity from OrderMaster where RefCode=@RefCode)    -- 'SADNPE')
								PRINT 'total Received Qty : ' + CAST(@totalReceivedQty AS VARCHAR) ;  
								PRINT 'total Order Qty : ' + CAST(@totalOrderQty AS VARCHAR) ;

								print @totalOrderQty-@totalReceivedQty
								-- if(@ReceiveQuantity>=(@totalOrderQty-@totalReceivedQty)
								if(@totalOrderQty<=@totalReceivedQty)
									begin
										update OrderMaster
										set OrderStatus=1 -- Received -- Red Color
										where RefCode=@RefCode  -- 'SADNPE'
										print 'come here at last...'
									end
								else
									begin
										update OrderMaster
										set OrderStatus=3 -- Half_Received -- Blue Color
										where RefCode=@RefCode	
										-- where RefCode='SADNPE'
										print 'come here ...'
									end		
							end
						else
							begin
								-- Received / Half_Received
								if(@ReceiveQuantity>=(select OrderQuantity from OrderMaster where RefCode=@RefCode))
								-- if(150>=(select OrderQuantity from OrderMaster where RefCode='SADNPE'))
									update OrderMaster
									set OrderStatus=1 -- Received -- Red Color
									-- where RefCode='SADNPE'
									where RefCode=@RefCode	
								else
									update OrderMaster
									set OrderStatus=3 -- Half_Received -- Blue Color
									-- where RefCode='SADNPE'		
									where RefCode=@RefCode	
							end

										
                     
					 -- TR3 change Quantity to Quantity+ReceiveQuantity @PartMaster
						update PartMaster
						set Quantity=coalesce("Quantity",0)+@ReceiveQuantity
						-- set Quantity=coalesce("Quantity",0)+150
						where PartMasterId=@PartMasterId
						-- where PartMasterId=13

				-- if not error, commit the transcation
				COMMIT TRANSACTION
				SET @retCode = 0
				return @retCode
			 END TRY
		     BEGIN CATCH
				  -- if error, roll back any chanegs done by any of the sql statements
				  ROLLBACK TRANSACTION
				  THROW;
				  SET @retCode = -1
				  return @retCode
		     END CATCH
END


-----------------------------------------------


